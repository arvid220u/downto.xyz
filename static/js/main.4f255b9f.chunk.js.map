{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["DTF","DTC","DTD","MATCH_TYPES","MATCH_EXPLANATIONS","Footer","className","href","a","path","data","url","process","console","log","fetch","method","cache","headers","body","JSON","stringify","response","json","Form","props","verifiedEmail","window","localStorage","getItem","verifiedKey","verified","useState","email","setEmail","password","setPassword","targets","setTargets","useEffect","update","useCallback","alert","resetEmail","removeItem","verifyEmail","match","post","type","value","onChange","e","target","placeholder","readOnly","onClick","map","name","htmlFor","App","mode","search","location","params","URLSearchParams","dtf","get","dtc","dtd","history","replaceState","document","title","pathname","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4f255b9f.chunk.js","sourcesContent":["import { useCallback, useRef, useEffect, useState } from \"react\";\nimport { RouteComponentProps } from \"@gatsbyjs/reach-router\";\nimport \"./App.css\";\n\nconst DTF = \"DTF\";\nconst DTC = \"DTC\";\nconst DTD = \"DTD\";\nconst MATCH_TYPES: string[] = [DTF, DTC, DTD];\nconst MATCH_EXPLANATIONS = {\n  [DTF]: \"(fuck)\",\n  [DTC]: \"(cuddle)\",\n  [DTD]: \"(date)\",\n};\n\nfunction Footer() {\n  return (\n    <footer>\n      <div className=\"my-2 max-w-2xl mx-auto\">\n        <h3 className=\"font-bold text-lg\">how does it work?</h3>\n        <p className=\"m-2\">\n          you enter the @mit.edu addresses of people you are down to do things\n          with. if you both indicate interest in each other for the same\n          category, you will both get an email notifying you of a match!\n        </p>\n        <h3 className=\"font-bold text-lg\">privacy</h3>\n        <p className=\"m-2\">\n          the data stored on our servers is encrypted using your password, so\n          (as long as your password is long enough) you don't need to worry\n          about your list of preferences being revealed at any point (assuming\n          you trust somewhat rushed unaudited untested code). information is\n          only revealed in the event of a match. a slightly unfortunate side\n          effect of this, and the fact that MIT does not have a public key\n          directory, is that a match will not be detected if person A enters\n          their prefererence for B before B has verified their email, until\n          person A comes back to this page and updates.\n        </p>\n        <p className=\"m-2\">\n          the source code is available at{\" \"}\n          <a href=\"https://github.com/arvid220u/downto.xyz\">\n            github.com/arvid220u/downto.xyz\n          </a>\n          . the readme contains a more thorough description of the exact privacy\n          protocol. feedback and pull requests are very welcome!\n        </p>\n        <h3 className=\"font-bold text-lg\">about</h3>\n        <p className=\"m-2\">\n          downto.xyz is inspired by the now-dead dildo.io. we believe that there\n          should be fewer taboos, more openness and more physical intimacy in\n          the world. while downto.xyz obviously isn't the end-all-be-all\n          solution to any of that, we hope that it can contribute to a more open\n          world, even if only by a tiny amount.\n        </p>\n        <p className=\"m-2\">\n          if you have any thoughts, positive or negative, email us at\n          downto-board@mit.edu. it is very important to us that downto.xyz is\n          good for the world, not bad, and if you have any concerns about\n          anything, please let us know.\n        </p>\n      </div>\n    </footer>\n  );\n}\n\n// Example POST method implementation:\nasync function post(path = \"\", data = {}) {\n  // Default options are marked with *\n  const url = process.env.REACT_APP_API_URL + path;\n  console.log(url);\n  const response = await fetch(url, {\n    method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n    // mode: \"no-cors\", // no-cors, *cors, same-origin\n    cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    // credentials: 'same-origin', // include, *same-origin, omit\n    headers: {\n      \"Content-Type\": \"application/json\",\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    // redirect: 'follow', // manual, *follow, error\n    // referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n  });\n  console.log(response);\n  return response.json(); // parses JSON response into native JavaScript objects\n}\n\nfunction getEmails(s) {\n  const rgx = /(\\S+@\\S+\\.\\S+)/gm;\n  const match = s.match(rgx);\n  if (!match) {\n    return [];\n  }\n  return match;\n}\n\nfunction isMitEmail(s) {\n  const rgx = /[a-z0-9_]+@mit\\.edu/gm;\n  const match = s.match(rgx);\n  if (!match) {\n    return false;\n  }\n  return true;\n}\n\ntype Targets = {\n  [DTF]: string;\n  [DTC]: string;\n  [DTD]: string;\n};\n\nfunction Form(props: { targets: Targets }) {\n  const verifiedEmail = window.localStorage.getItem(\"email\");\n  const verifiedKey = window.localStorage.getItem(\"key\");\n  const verified = verifiedEmail != null && verifiedKey != null;\n\n  const [email, setEmail] = useState(verified ? verifiedEmail : \"\");\n  const [password, setPassword] = useState(\"\");\n  const [targets, setTargets] = useState(props.targets);\n\n  useEffect(() => {\n    setTargets(props.targets);\n  }, [props.targets]);\n\n  const update = useCallback(() => {\n    if (!verified) {\n      alert(\"you must verify your email first!\");\n      return;\n    }\n    // const to = getEmails();\n    // if (to.length === 0) {\n    //   alert(\n    //     \"you need to send to at least 1 friend! no email address recognized\"\n    //   );\n    //   return;\n    // }\n    // const d = {\n    //   fr: email,\n    //   to,\n    //   key: verifiedKey,\n    // };\n    // post(\"/send\", send);\n    // window.history.replaceState(\n    //   {},\n    //   document.title,\n    //   window.location.pathname +\n    //     `?to=${encodeURIComponent(to.join(\",\"))}&m=${encodeURIComponent(\n    //       formattedMessage\n    //     )}`\n    // );\n    // sent();\n  }, [email, password, targets, verified, verifiedKey]);\n\n  const resetEmail = useCallback(() => {\n    window.localStorage.removeItem(\"email\");\n    window.localStorage.removeItem(\"key\");\n    setEmail(\"\");\n  }, []);\n  const verifyEmail = useCallback(() => {\n    if (!isMitEmail(email)) {\n      alert(\"you need to send from an mit.edu email address!\");\n      return;\n    }\n    let v = {\n      email,\n      targets,\n    };\n    post(\"/verify\", v);\n    alert(\"check your email for a verification link!\");\n  }, [email, targets]);\n\n  return (\n    <div className=\"Send mb-4\">\n      <div className=\"inputrow\">\n        <input\n          type=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          placeholder=\"mykerb@mit.edu\"\n          readOnly={verified}\n        />\n        <button onClick={() => (verified ? resetEmail() : verifyEmail())}>\n          {verified ? \"change\" : \"verify\"}\n        </button>\n      </div>\n      <input\n        type=\"password\"\n        value={password}\n        placeholder=\"password\"\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      {MATCH_TYPES.map((type) => {\n        return (\n          <div className=\"inputrow\">\n            <div className=\"my-auto mx-auto mr-2 w-20\">\n              <span className=\"font-bold text-lg\">{type}:</span>\n              <br />\n              <span className=\"text-xs\">{MATCH_EXPLANATIONS[type]}</span>\n            </div>\n            <textarea\n              className=\"inputrow\"\n              placeholder=\"friend@mit.edu, friend2@mit.edu\"\n              value={targets[type]}\n              onChange={(e) =>\n                setTargets({\n                  [type]: e.target.value,\n                  ...targets,\n                })\n              }\n            />\n          </div>\n        );\n      })}\n      <div>\n        <input\n          className=\"w-3 h-3 border border-gray-300 rounded\"\n          type=\"checkbox\"\n          name=\"solemnlyswear\"\n        />{\" \"}\n        <label htmlFor=\"solemnlyswear\">\n          i hereby declare that i am excited to do things with the people above,\n          should we match\n        </label>\n      </div>\n      <button onClick={update}>update</button>\n      <div>(note: you can only update once every 24 hours!)</div>\n      (note 2: emails are sent immediately upon a match! so please, if so only\n      to avoid awkwardness, be honest. seriously)\n    </div>\n  );\n}\n\nfunction App(props: RouteComponentProps) {\n  const [mode, setMode] = useState(\"normal\");\n  const [targets, setTargets] = useState({} as Targets);\n\n  useEffect(() => {\n    const search = window.location.search;\n    const params = new URLSearchParams(search);\n    const dtf = params.get(\"dtf\");\n    const dtc = params.get(\"dtc\");\n    const dtd = params.get(\"dtd\");\n    setTargets({\n      [DTF]: dtf || \"\",\n      [DTC]: dtc || \"\",\n      [DTD]: dtd || \"\",\n    });\n    window.history.replaceState({}, document.title, window.location.pathname);\n  }, [mode]);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"font-bold text-xl m-2\">downto.xyz</h1>\n      <Form targets={targets} />\n      <hr />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Router } from \"@gatsbyjs/reach-router\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App path=\"/\" />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(null);\n"],"sourceRoot":""}